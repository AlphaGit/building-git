## Commits

At this point you have added and removed files from your staging area, and you're ready to _commit_ to those changes. Each commit will represent a snapshot of your repository, and if you lay down the snapshots side by side (which git totally does), you can also think of commits as what changes were performed since the last commit.

In order to commit the files that you have added to the staging area, you just:

```console
git commit
```

By default, git will open a text editor to ask for a message to be displayed.

[image of a text editor prompting for a commit message] 

You'll also be able to review several of the details for the commit, and abort the operation if you want. Enter your commit message, save the file for the editor that git opened, and when you close it, git will do it's magic.

[image of what git displays after creating a commit] 

The rest of the development process for working on a feature is a repetition of the last steps.

* Make changes
* Reach a checkpoint, verify
* Add to staging area
* Commit
* Rinse and repeat

### Quick adding: adding all

You'll find quite often that you have a pretty good knowledge of what your changes are, so you don't want to add files to the staging area to review them. You just _know_ that you want to add all pending changes to a commit.

Git has you covered. 

```console
git commit -a
```

With this option, you can bypass adding all files to the staging area and have git do that for you.

Commits are pretty much the central part of git. The bread and butter of this toast that is this VCS. Learn to love them. Put some thought into how you divide your work and how you signal what has been done in them. There will be a lot of pleasure from making your work easy for yourself, or a lot of pain and suffering for making your work difficult.

     