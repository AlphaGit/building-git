## Ignoring files

Let's say that your environment has files that should not be committed to the repository. Files that should be worked on by every developer, because, for example, they contain local configurations, or usernames and passwords, or anything that you don't want shared in your project history. This is specially useful if your project is open source, because while you want to share your code, you don't want to share your credentials and accounts. (You're not so open, are you now?)

While the usual way of dealing with this is using environment configuration and having your servers do the work, that configuration itself could be anything, from registry entries, to a database, to local files.

In the case of local files to the project -- you guessed it -- git will tell you that they are untracked. And if you commit all pending changes, those will go as well.

Finally, you may have a project build, or compilation, or transpiled files that you don't want to go along with the source code. And this is perfectly fine and understandable. No, really, you don't need to explain it. I get you.

Git allows you to ignore files that comply with an expression. Matching files one by one would be really tedious, but having expression allows for wildcards and the such. It is really not that difficult.

In order to do this, just create or edit the `.gitignore` file in the root directory of the repository. Actually, you can have several of these files, each in different directories, and they'll all be summed up to be applied to the current directory.

To keep it simple, let's go with just one:

```text
thumbs.db              # 1
/config/passwords.txt  # 2
*.tmp                  # 3
/dist/                 # 4
!/dist/builder.js      # 5
```

What this previous example is saying is:

1. Ignore the `thumbs.db` file, wherever it is (because we did not specify directories.)
2. Ignore the file `passwords.txt` that is present in the `config` directory. Any other `passwords.txt` file will not be ignored.
3. Ignore any file with the extension `.tmp`.
4. Ignore the full contents of the directory `dist`.
5. Make an exception with the file `builder.js` inside the `dist` directory, so do NOT ignore that one.

If you happen to know what a glob is, you should be on your way. If not, [Wikipedia has a nice quick refresher](https://en.wikipedia.org/wiki/Glob_(programming)).

After crafting your file, just save changes into it, and add the file to index. Yes, the file is a file inside the repository, so it needs to be committed too. While this sounds strange, it is actually great: it means that different points in time can ignore a different set of files. You could create a base configuration, commit it, and then ignore it. This means that whoever makes changes into it, cannot commit changes to it accidentally. (They'd have to un-ignore it first.)

